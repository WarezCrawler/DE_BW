

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: 0SOURSYSTEM Source system ID.
        SOURSYSTEM           TYPE RSSOURSYSID,
*      InfoObject: ZCHRT_ACC Chart of Accounts.
        /BIC/ZCHRT_ACC           TYPE /BIC/OIZCHRT_ACC,
*      InfoObject: ZACCOUNT Account Number.
        /BIC/ZACCOUNT           TYPE /BIC/OIZACCOUNT,
*      InfoObject: ZDECSKONT DECS account number (Global).
        /BIC/ZDECSKONT           TYPE /BIC/OIZDECSKONT,
*      InfoObject: ZC_ACDER DCS Deriv: Account.
        /BIC/ZC_ACDER           TYPE /BIC/OIZC_ACDER,
*      InfoObject: ZC_DECSAC DECS Account.
        /BIC/ZC_DECSAC           TYPE /BIC/OIZC_DECSAC,
*      InfoObject: ZC_ACNT DCS Account.
        /BIC/ZC_ACNT           TYPE /BIC/OIZC_ACNT,
*      InfoObject: ZC_MAPACC DCS MAP: Account.
        /BIC/ZC_MAPACC           TYPE /BIC/OIZC_MAPACC,
*      InfoObject: ZC_BOOL Status of Record.
        /BIC/ZC_BOOL           TYPE /BIC/OIZC_BOOL,
*      InfoObject: 0RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
    ... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*
    METHODS
      new_record__end_routine
        IMPORTING
          source_segid             type rstran_segid
          source_record            type sytabix
        EXPORTING
          record_new               type sytabix.

    METHODS
      end_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          RESULT_PACKAGE              type _ty_t_TG_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_end_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method end_routine
*----------------------------------------------------------------------*
*       Calculation of result package via end routine.
*       Note: Update of target fields depends on rule assignment in
*       transformation editor. Only fields that have a rule assigned,
*       are updated to the data target.
*----------------------------------------------------------------------*
*   <-> result package
*----------------------------------------------------------------------*
  METHOD end_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <RESULT_FIELDS>    TYPE _ty_s_TG_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
    ... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
    ... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.

    DATA: lt_zc_mapacc TYPE STANDARD TABLE OF /bic/pzc_mapacc,
          ls_zc_mapacc TYPE /bic/pzc_mapacc,
          lt_zc_decsac TYPE STANDARD TABLE OF /bic/pzc_decsac,
          ls_zc_decsac TYPE /bic/pzc_decsac,
          lv_acc_alpha TYPE C LENGTH 32,
          l_account TYPE rsd_chavl,
          l_zc_acnt TYPE rsd_chavl,
          l_chavl TYPE rsd_chavl.          .

    SELECT * FROM /bic/pzc_mapacc INTO TABLE lt_zc_mapacc
      WHERE OBJVERS = 'A'.

    SELECT * FROM /bic/pzc_decsac INTO TABLE lt_zc_decsac
      WHERE OBJVERS = 'A'.

    SORT lt_zc_mapacc BY SOURSYSTEM /bic/zc_mapacc.
    SORT lt_zc_decsac.

    LOOP AT RESULT_PACKAGE ASSIGNING <RESULT_FIELDS>.
**-----------------------------------------------------------
** Source system = 04
** Source system = 09
** Source system = 11
** or other systems
**-----------------------------------------------------------
      IF <RESULT_FIELDS>-SOURSYSTEM = '04' OR
         <RESULT_FIELDS>-SOURSYSTEM = '09' OR
         <RESULT_FIELDS>-SOURSYSTEM = '11'.
         l_account = <RESULT_FIELDS>-/bic/zdecskont.
      ELSE.
         IF <RESULT_FIELDS>-/bic/zaccount IS NOT INITIAL.
             l_account = <RESULT_FIELDS>-/bic/zaccount.
         ELSE.
             l_account = <RESULT_FIELDS>-/bic/zdecskont.
         ENDIF.
      ENDIF.

      IF l_account IS NOT INITIAL.
         CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
           EXPORTING
             INPUT         = l_account
          IMPORTING
           OUTPUT        =  lv_acc_alpha.

*  Lookup in account mapping with SOURSYSTEM
          READ TABLE lt_zc_mapacc INTO ls_zc_mapacc
            WITH KEY SOURSYSTEM = <RESULT_FIELDS>-SOURSYSTEM
            /bic/zc_mapacc = l_account
            BINARY SEARCH.

           IF SY-SUBRC = 0.
             <RESULT_FIELDS>-/bic/zc_decsac = ls_zc_mapacc-/bic/zc_acnt.
           ELSE.
*  lookup w/o SOURSYSTEM
             READ TABLE lt_zc_mapacc INTO ls_zc_mapacc
              WITH KEY SOURSYSTEM = ' '
                       /bic/zc_mapacc = l_account
                       BINARY SEARCH.
             IF SY-SUBRC = 0.
               <RESULT_FIELDS>-/bic/zc_decsac =
               ls_zc_mapacc-/bic/zc_acnt.
             ELSE.
*  Else - is DECS account available in master data ZC_DECSAC?
               READ TABLE lt_zc_decsac INTO ls_zc_decsac
                    WITH KEY /bic/zc_decsac = lv_acc_alpha
                    BINARY SEARCH.

               IF SY-SUBRC = 0.
                 <RESULT_FIELDS>-/bic/zc_decsac = ls_zc_decsac.
               ENDIF.
           ENDIF.
        ENDIF.

        IF <RESULT_FIELDS>-/bic/zc_decsac IS NOT INITIAL.
          l_chavl = <RESULT_FIELDS>-/bic/zc_decsac.
*   Lookup DCS Profit Center (ZC_ACNT) from attribute value on ZC_DECSAC
          CALL FUNCTION 'RSAU_READ_MASTER_DATA'
            EXPORTING
              i_iobjnm                = 'ZC_DECSAC'
              i_chavl                 = l_chavl
              i_attrnm                = 'ZC_ACNT'
            IMPORTING
              e_attrval               = l_zc_acnt
            EXCEPTIONS
              read_error              = 1
              no_such_attribute       = 2
              wrong_import_parameters = 3
              chavl_not_found         = 4
              OTHERS                  = 5.
          IF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            EXIT.
          ELSE.
            <RESULT_FIELDS>-/bic/zc_acnt = l_zc_acnt.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "end_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_end_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_end_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
    ... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_end_routine

  METHOD new_record__end_routine.

***** IMPLEMENTATION  is only visible in generated program *****

  ENDMETHOD.
ENDCLASS.                    "routine IMPLEMENTATION
