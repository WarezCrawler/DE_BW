

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: ZDECSPRCT DECS Profit Center.
        /BIC/ZDECSPRCT           TYPE /BIC/OIZDECSPRCT,
*      InfoObject: 0DATETO Valid To.
        DATETO           TYPE /BI0/OIDATETO,
*      InfoObject: 0DATEFROM Valid From.
        DATEFROM           TYPE /BI0/OIDATEFROM,
*      InfoObject: ZC_SBU BM Strategic Business Unit.
        /BIC/ZC_SBU           TYPE /BIC/OIZC_SBU,
*      InfoObject: ZC_VP BM Value Pool.
        /BIC/ZC_VP           TYPE /BIC/OIZC_VP,
*      InfoObject: ZC_IPPCP BM PP/CP Indicator.
        /BIC/ZC_IPPCP           TYPE /BIC/OIZC_IPPCP,
*      InfoObject: ZC_SBA1 BM Strategic Business Activity.
        /BIC/ZC_SBA1           TYPE /BIC/OIZC_SBA1,
*      InfoObject: ZC_SBA0 BM Business Segment.
        /BIC/ZC_SBA0           TYPE /BIC/OIZC_SBA0,
*      InfoObject: ZC_SUBVP BM Sub Value Pool.
        /BIC/ZC_SUBVP           TYPE /BIC/OIZC_SUBVP,
*      InfoObject: ZC_SEGM DCS Segment.
        /BIC/ZC_SEGM           TYPE /BIC/OIZC_SEGM,
*      InfoObject: ZPRCATGY Profit Center Category.
        /BIC/ZPRCATGY           TYPE /BIC/OIZPRCATGY,
*      InfoObject: 0RESP_PERS Person Responsible.
        RESP_PERS           TYPE /BI0/OIRESP_PERS,
*      InfoObject: ZLOCK_IND Lock Indicator (Open/Closed).
        /BIC/ZLOCK_IND           TYPE /BIC/OIZLOCK_IND,
*      InfoObject: ZC_MDSRC MD Data Source (ECC, BPC).
        /BIC/ZC_MDSRC           TYPE /BIC/OIZC_MDSRC,
*      InfoObject: 0RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*
    METHODS
      new_record__end_routine
        IMPORTING
          source_segid             type rstran_segid
          source_record            type sytabix
        EXPORTING
          record_new               type sytabix.

    METHODS
      end_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          RESULT_PACKAGE              type _ty_t_TG_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_end_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method end_routine
*----------------------------------------------------------------------*
*       Calculation of result package via end routine.
*       Note: Update of target fields depends on rule assignment in
*       transformation editor. Only fields that have a rule assigned,
*       are updated to the data target.
*----------------------------------------------------------------------*
*   <-> result package
*----------------------------------------------------------------------*
  METHOD end_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <RESULT_FIELDS>    TYPE _ty_s_TG_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.

DATA:
  it_svp TYPE SORTED TABLE OF /BIC/QZC_SUBVP WITH NON-UNIQUE KEY
  /BIC/ZC_SUBVP DATETO.

FIELD-SYMBOLS:
      <fs_svp> TYPE /BIC/QZC_SUBVP.

SELECT * FROM /BIC/QZC_SUBVP INTO CORRESPONDING FIELDS OF TABLE
  it_svp WHERE OBJVERS = 'A'.

LOOP AT RESULT_PACKAGE ASSIGNING <RESULT_FIELDS>.
  LOOP AT it_svp ASSIGNING <fs_svp> WHERE
    /BIC/ZC_SUBVP = <RESULT_FIELDS>-/BIC/ZC_SUBVP AND
  ( DATEFROM <= <RESULT_FIELDS>-DATEFROM AND
    DATETO >= <RESULT_FIELDS>-DATETO ).
    <RESULT_FIELDS>-/BIC/ZC_VP = <fs_svp>-/BIC/ZC_VP.
    <RESULT_FIELDS>-/BIC/ZC_SBA1 = <fs_svp>-/BIC/ZC_SBA1.
    <RESULT_FIELDS>-/BIC/ZC_SBA0 = <fs_svp>-/BIC/ZC_SBA0.
    <RESULT_FIELDS>-/BIC/ZC_SBU = <fs_svp>-/BIC/ZC_SBU.
  ENDLOOP.

ENDLOOP.

*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "end_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_end_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_end_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_end_routine

  METHOD new_record__end_routine.

***** IMPLEMENTATION  is only visible in generated program *****

  ENDMETHOD.
ENDCLASS.                    "routine IMPLEMENTATION
