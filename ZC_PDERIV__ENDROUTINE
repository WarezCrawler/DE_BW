

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: 0SOURSYSTEM Source system ID.
        SOURSYSTEM           TYPE RSSOURSYSID,
*      InfoObject: ZCO_AREA Controlling area.
        /BIC/ZCO_AREA           TYPE /BIC/OIZCO_AREA,
*      InfoObject: ZCOMP_COD Company Code.
        /BIC/ZCOMP_COD           TYPE /BIC/OIZCOMP_COD,
*      InfoObject: ZPART_PRC Partner Profit Center.
        /BIC/ZPART_PRC           TYPE /BIC/OIZPART_PRC,
*      InfoObject: ZPGCOMPNY Comp. ID Tr. Partner (Global).
        /BIC/ZPGCOMPNY           TYPE /BIC/OIZPGCOMPNY,
*      InfoObject: ZC_PDERIV DCS Deriv: Partner Organisation.
        /BIC/ZC_PDERIV           TYPE /BIC/OIZC_PDERIV,
*      InfoObject: ZDECSPPRT Partner DECS PrCt.
        /BIC/ZDECSPPRT           TYPE /BIC/OIZDECSPPRT,
*      InfoObject: ZC_PORG Partner DCS PrCt.
        /BIC/ZC_PORG           TYPE /BIC/OIZC_PORG,
*      InfoObject: ZC_MAPPR DCS MAP: Profit Center reference.
        /BIC/ZC_MAPPR           TYPE /BIC/OIZC_MAPPR,
*      InfoObject: ZC_BOOL Status of Record.
        /BIC/ZC_BOOL           TYPE /BIC/OIZC_BOOL,
*      InfoObject: 0RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
    ... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*
    METHODS
      new_record__end_routine
        IMPORTING
          source_segid             type rstran_segid
          source_record            type sytabix
        EXPORTING
          record_new               type sytabix.

    METHODS
      end_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          RESULT_PACKAGE              type _ty_t_TG_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_end_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
TABLES: /BIC/PZC_MAPPC,
        /BIC/PZDECSPRCT,
        /BIC/PZC_ORG,
        /BIC/PZCOMP_COD.
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method end_routine
*----------------------------------------------------------------------*
*       Calculation of result package via end routine.
*       Note: Update of target fields depends on rule assignment in
*       transformation editor. Only fields that have a rule assigned,
*       are updated to the data target.
*----------------------------------------------------------------------*
*   <-> result package
*----------------------------------------------------------------------*
  METHOD end_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <RESULT_FIELDS>    TYPE _ty_s_TG_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
    ... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
    ... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.

    DATA: LT_MAPPC TYPE STANDARD TABLE OF /BIC/PZC_MAPPC,
          LS_MAPPC TYPE /BIC/PZC_MAPPC,
          LT_PPRT TYPE STANDARD TABLE OF /BIC/PZDECSPRCT,
          LS_PPRT TYPE /BIC/PZDECSPRCT,
          LT_ORG TYPE STANDARD TABLE OF /BIC/PZC_ORG,
          LS_ORG TYPE /BIC/PZC_ORG,
          LT_COMP TYPE STANDARD TABLE OF /BIC/PZCOMP_COD,
          LS_COMP TYPE /BIC/PZCOMP_COD.


    FIELD-SYMBOLS: <FS_MAPPC> LIKE LS_MAPPC,
                   <FS_PPRT> LIKE LS_PPRT,
                   <FS_ORG> LIKE LS_ORG,
                   <FS_COMP> LIKE LS_COMP.

    SELECT * FROM /BIC/PZC_MAPPC INTO TABLE LT_MAPPC WHERE
      OBJVERS = 'A'.

    SELECT * FROM /BIC/PZDECSPRCT INTO TABLE LT_PPRT
      WHERE   OBJVERS = 'A'.

    SELECT * FROM /BIC/PZC_ORG INTO TABLE LT_ORG
         WHERE   OBJVERS = 'A'.

    SELECT * FROM /BIC/PZCOMP_COD INTO TABLE LT_COMP
        WHERE   OBJVERS = 'A'.

  LOOP AT RESULT_PACKAGE ASSIGNING <RESULT_FIELDS>.


*   Partner Profit Center is different than #
    IF <RESULT_FIELDS>-/BIC/ZPART_PRC IS NOT INITIAL.

*     Source system = '02'
      IF <RESULT_FIELDS>-SOURSYSTEM = '02'.
        <RESULT_FIELDS>-/BIC/ZDECSPPRT = <RESULT_FIELDS>-/BIC/ZPART_PRC.

*     Source system NOT EQUAL to '02'
      ELSE.

*           Entity and Source System Check
            READ TABLE LT_MAPPC ASSIGNING <FS_MAPPC> WITH KEY
              /BIC/ZC_MAPPC = <RESULT_FIELDS>-/BIC/ZPART_PRC
              SOURSYSTEM    = <RESULT_FIELDS>-SOURSYSTEM.

*             If found and not marked as skipped
              IF SY-SUBRC = 0 AND <FS_MAPPC>-/BIC/ZC_BOOL = ''.
                <RESULT_FIELDS>-/BIC/ZDECSPPRT = <FS_MAPPC>-/BIC/ZC_ORG.
                CONCATENATE
                  <FS_MAPPC>-SOURSYSTEM
                  '/'
                  <FS_MAPPC>-/BIC/ZC_MAPPC
                       INTO <RESULT_FIELDS>-/BIC/ZC_MAPPR.
                .
              ELSE.

*               Entity Check Only
                READ TABLE LT_MAPPC ASSIGNING <FS_MAPPC> WITH KEY
                  /BIC/ZC_MAPPC = <RESULT_FIELDS>-/BIC/ZPART_PRC
                  SOURSYSTEM    = ''.

*                 If found and not marked as skipped
                  IF SY-SUBRC = 0 AND <FS_MAPPC>-/BIC/ZC_BOOL = ''.
                   <RESULT_FIELDS>-/BIC/ZDECSPPRT =
                   <FS_MAPPC>-/BIC/ZC_ORG.
                   <RESULT_FIELDS>-/BIC/ZC_MAPPR =
                   <FS_MAPPC>-/BIC/ZC_MAPPC.
                  ELSE.

*                 if not found
                    <RESULT_FIELDS>-/BIC/ZDECSPPRT = ''.
                  ENDIF.

            ENDIF.
*     End of source system check
      ENDIF.

*   Partner Profit Center is EMPTY
    ELSE.
      <RESULT_FIELDS>-/BIC/ZDECSPPRT = ''.

*   End of Partner Profit Center Check
    ENDIF.

*     Call Alpha conversion for ZDECSPPRT
      call function 'CONVERSION_EXIT_ALPHA_INPUT'
        exporting
          input = <RESULT_FIELDS>-/BIC/ZDECSPPRT
        importing
          output = <RESULT_FIELDS>-/BIC/ZDECSPPRT
        exceptions
          others = 1.

*     Call Alpha conversion for ZDECSPPRT
      call function 'CONVERSION_EXIT_ALPHA_INPUT'
        exporting
          input = <RESULT_FIELDS>-/BIC/ZC_MAPPR
        importing
          output = <RESULT_FIELDS>-/BIC/ZC_MAPPR
        exceptions
          others = 1.

*********************************************************************
*ICP Check START for all source systems
*********************************************************************

*  Company ID of TP <> # - ICP
   IF <RESULT_FIELDS>-/BIC/ZPGCOMPNY IS NOT INITIAL.

*     ZDECSPPRT <> #
      IF <RESULT_FIELDS>-/BIC/ZDECSPPRT IS NOT INITIAL.

*       Consistency check
         READ TABLE LT_PPRT ASSIGNING <FS_PPRT> WITH KEY
             /BIC/ZDECSPRCT = <RESULT_FIELDS>-/BIC/ZDECSPPRT.

            IF SY-SUBRC = 0.
*             Comparing TP ID with ZGCOMPANY
*             Company ID of TP <> ZDECSPPRT-ZGCOMPANY
              IF <FS_PPRT>-/BIC/ZGCOMPANY <>
              <RESULT_FIELDS>-/BIC/ZPGCOMPNY.

*               Concatinate TP to Partner Profit Centre.
                IF <RESULT_FIELDS>-/BIC/ZPGCOMPNY+0(1) = '0'.
                  CONCATENATE 'CC' <RESULT_FIELDS>-/BIC/ZPGCOMPNY+2(4)
                             INTO <RESULT_FIELDS>-/BIC/ZDECSPPRT.

                ELSE.
                  CONCATENATE 'CC' <RESULT_FIELDS>-/BIC/ZPGCOMPNY+0(4)
                             INTO <RESULT_FIELDS>-/BIC/ZDECSPPRT.
                ENDIF.
              ENDIF.
            ENDIF.

*     ZDECSPPRT IS EMPTY
      ELSE.
*               Concatinate TP to Partner Profit Centre.
                IF <RESULT_FIELDS>-/BIC/ZPGCOMPNY+0(1) = '0'.
                  CONCATENATE 'CC' <RESULT_FIELDS>-/BIC/ZPGCOMPNY+2(4)
                             INTO <RESULT_FIELDS>-/BIC/ZDECSPPRT.

                ELSE.
                  CONCATENATE 'CC' <RESULT_FIELDS>-/BIC/ZPGCOMPNY+0(4)
                             INTO <RESULT_FIELDS>-/BIC/ZDECSPPRT.
                ENDIF.

*     End of ZDECSPPRT check
      ENDIF.

*  Company ID of TP IS EMPTY - NOT ICP
   ELSE.

*     ZDECSPPRT <> #
      IF <RESULT_FIELDS>-/BIC/ZDECSPPRT IS NOT INITIAL.
*       Consistency check
         READ TABLE LT_PPRT ASSIGNING <FS_PPRT> WITH KEY
             /BIC/ZDECSPRCT = <RESULT_FIELDS>-/BIC/ZDECSPPRT.

            IF SY-SUBRC = 0.
              READ TABLE LT_COMP ASSIGNING <FS_COMP> WITH KEY
                 SOURSYSTEM     = <RESULT_FIELDS>-SOURSYSTEM
                 /BIC/ZCOMP_COD = <RESULT_FIELDS>-/BIC/ZCOMP_COD.

              IF SY-SUBRC = 0.
*             Comparing TP ID with ZGCOMPANY
*             Company ID  <> ZDECSPPRT-ZGCOMPANY
                IF <FS_PPRT>-/BIC/ZGCOMPANY <>
                  <FS_COMP>-/BIC/ZGCOMPANY.
                  <RESULT_FIELDS>-/BIC/ZDECSPPRT = ''.
                ENDIF.
              ENDIF.
            ENDIF.

*     ZDECSPPRT IS EMPTY
      ELSE.

*     End of ZDECSPPRT check
      ENDIF.

*  End of Company ID check
   ENDIF.

*     Assign ZDECSPPRT__ZC_ORG to ZC_PORG

      READ TABLE LT_PPRT ASSIGNING <FS_PPRT> WITH KEY
         /BIC/ZDECSPRCT = <RESULT_FIELDS>-/BIC/ZDECSPPRT.

       IF SY-SUBRC = 0.
         <RESULT_FIELDS>-/BIC/ZC_PORG = <FS_PPRT>-/BIC/ZC_ORG.
       ENDIF.

   ENDLOOP.



*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "end_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_end_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_end_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
    ... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_end_routine

  METHOD new_record__end_routine.

***** IMPLEMENTATION  is only visible in generated program *****

  ENDMETHOD.
ENDCLASS.                    "routine IMPLEMENTATION
