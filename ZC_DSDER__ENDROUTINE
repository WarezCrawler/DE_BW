

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: 0SOURSYSTEM Source system ID.
        SOURSYSTEM           TYPE RSSOURSYSID,
*      InfoObject: 0FISCVARNT Fiscal year variant.
        FISCVARNT           TYPE /BI0/OIFISCVARNT,
*      InfoObject: 0FISCPER Fiscal year / period.
        FISCPER           TYPE /BI0/OIFISCPER,
*      InfoObject: ZCOMP_COD Company Code.
        /BIC/ZCOMP_COD           TYPE /BIC/OIZCOMP_COD,
*      InfoObject: ZCO_AREA Controlling area.
        /BIC/ZCO_AREA           TYPE /BIC/OIZCO_AREA,
*      InfoObject: ZPROFIT_C Profit Center.
        /BIC/ZPROFIT_C           TYPE /BIC/OIZPROFIT_C,
*      InfoObject: ZC_DSINIT DCS Deriv: Initial Data Source.
        /BIC/ZC_DSINIT           TYPE /BIC/OIZC_DSINIT,
*      InfoObject: ZC_DSDER DCS Deriv: Data Source.
        /BIC/ZC_DSDER           TYPE /BIC/OIZC_DSDER,
*      InfoObject: ZC_DATAS Data Source.
        /BIC/ZC_DATAS           TYPE /BIC/OIZC_DATAS,
*      InfoObject: 0RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*
    METHODS
      new_record__end_routine
        IMPORTING
          source_segid             type rstran_segid
          source_record            type sytabix
        EXPORTING
          record_new               type sytabix.

    METHODS
      end_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          RESULT_PACKAGE              type _ty_t_TG_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_end_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method end_routine
*----------------------------------------------------------------------*
*       Calculation of result package via end routine.
*       Note: Update of target fields depends on rule assignment in
*       transformation editor. Only fields that have a rule assigned,
*       are updated to the data target.
*----------------------------------------------------------------------*
*   <-> result package
*----------------------------------------------------------------------*
  METHOD end_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <RESULT_FIELDS>    TYPE _ty_s_TG_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.

DATA: lt_zc_mappc TYPE STANDARD TABLE OF /bic/pzc_mappc,
      ls_zc_mappc TYPE /bic/pzc_mappc,
      lv_zc_bool TYPE /bic/oizc_bool,
      lv_ds_check TYPE RSCHAVL,
      lv_fiscper TYPE /BI0/OIFISCPER..

SELECT * FROM /bic/pzc_mappc INTO TABLE lt_zc_mappc
    WHERE OBJVERS = 'A'.

SELECT FISCPER FROM /bic/pzc_param INTO lv_fiscper
    WHERE /bic/zc_param = 'CM_ACT_PER' AND
          OBJVERS = 'A'.
ENDSELECT.

LOOP AT RESULT_PACKAGE ASSIGNING <RESULT_FIELDS>.
* Set data source depending on EL/GAS CC is before or after 01.01.2017
  CLEAR lv_zc_bool.
* Get DECS profit center from mapping
  IF <RESULT_FIELDS>-/bic/zprofit_c IS NOT INITIAL.
    READ TABLE lt_zc_mappc INTO ls_zc_mappc
    WITH KEY /bic/zc_mappc = <RESULT_FIELDS>-/bic/zprofit_c.

    IF SY-SUBRC = 0.
      lv_zc_bool = ls_zc_mappc-/bic/zc_bool.
    ENDIF.
  ENDIF.

******************************************************
*                   START                            *
* EL/GAS actuals mirroring of data to DECS should be *
* filtered out after 31-12-2016, to avoid dobbel data*
******************************************************

**** SOURCESYSTEM = 04 - Actuals
  IF <RESULT_FIELDS>-/BIC/ZC_DSINIT = 'DW_DP1_FISL'.
    IF <RESULT_FIELDS>-FISCPER >= lv_fiscper AND
       ( <RESULT_FIELDS>-/bic/zcomp_cod = '2000' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '3200' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '4000' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '4200' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '4500' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '9700' ).
            <RESULT_FIELDS>-/bic/zc_datas = 'DW_DP1_FISL_2'.
    ELSEIF lv_zc_bool IS NOT INITIAL.
* Profit Center is set to "ignore"
      <RESULT_FIELDS>-/BIC/ZC_DATAS = 'DW_DP1_FISL_3'.
    ELSE.
      <RESULT_FIELDS>-/BIC/ZC_DATAS = 'DW_DP1_FISL'.
    ENDIF.
    CONTINUE.
**** SOURCESYSTEM = 09 - Actuals
  ELSEIF <RESULT_FIELDS>-/BIC/ZC_DSINIT = 'DW_P01_FISL'.
    IF <RESULT_FIELDS>-FISCPER >= lv_fiscper AND
       ( <RESULT_FIELDS>-/bic/zcomp_cod = '18' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '11' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '24' OR
         <RESULT_FIELDS>-/bic/zcomp_cod = '26' ).
          <RESULT_FIELDS>-/bic/zc_datas = 'DW_P01_FISL_2'.
    ELSEIF lv_zc_bool IS NOT INITIAL.
      <RESULT_FIELDS>-/bic/zc_datas = 'DW_P01_FISL_3'.
    ELSE.
      <RESULT_FIELDS>-/bic/zc_datas = 'DW_P01_FISL'.
    ENDIF.
    CONTINUE.
 ENDIF.
******************************************************
* EL/GAS actuals mirroring of data to DECS should be *
* filtered out after 31-12-2016, to avoid dobbel data*
*                     END                            *
******************************************************

**** SOURCESYSTEM = 04/09 - Plan (IP)
  IF lv_zc_bool IS INITIAL.
    <RESULT_FIELDS>-/bic/zc_datas = <RESULT_FIELDS>-/bic/zc_dsinit.
  ELSE.
* Profit Center is set to "ignore"
    CONCATENATE <RESULT_FIELDS>-/bic/zc_dsinit '_3' INTO
    <RESULT_FIELDS>-/bic/zc_datas.
  ENDIF.

*Integrity Check for zc_datas and ZC_ORG
  lv_ds_check = <RESULT_FIELDS>-/bic/zc_datas.

  CALL FUNCTION 'RSAR_VALUE_INTEGRITY_INFOOBJ'
    EXPORTING
     I_IOBJNM                 = 'ZC_DATAS'
     I_CHAVL                  = lv_ds_check
*I_HIGH_CARDINALITY       = RS_C_FALSE
  EXCEPTIONS
    VALUE_NOT_VALID          = 1
    OTHERS                   = 2.

  IF SY-SUBRC <> 0.
*Implement suitable error handling here
    CLEAR <RESULT_FIELDS>-/bic/zc_datas.
  ENDIF.

ENDLOOP.

REFRESH lt_zc_mappc.

*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "end_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_end_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_end_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_end_routine

  METHOD new_record__end_routine.

***** IMPLEMENTATION  is only visible in generated program *****

  ENDMETHOD.
ENDCLASS.                    "routine IMPLEMENTATION
