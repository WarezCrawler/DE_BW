

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_TG_1,
*      InfoObject: 0SOURSYSTEM Source system ID.
        SOURSYSTEM           TYPE RSSOURSYSID,
*      InfoObject: ZCO_AREA Controlling area.
        /BIC/ZCO_AREA           TYPE /BIC/OIZCO_AREA,
*      InfoObject: ZPROFIT_C Profit Center.
        /BIC/ZPROFIT_C           TYPE /BIC/OIZPROFIT_C,
*      InfoObject: ZCOMP_COD Company Code.
        /BIC/ZCOMP_COD           TYPE /BIC/OIZCOMP_COD,
*      InfoObject: ZZSEGMENT HFM Custom 1 (Global).
        /BIC/ZZSEGMENT           TYPE /BIC/OIZZSEGMENT,
*      InfoObject: ZSEGMENT Segment for Segmental Reporting.
        /BIC/ZSEGMENT           TYPE /BIC/OIZSEGMENT,
*      InfoObject: ZC_DERIV DCS Deriv: Organisation.
        /BIC/ZC_DERIV           TYPE /BIC/OIZC_DERIV,
*      InfoObject: ZC_SEGM Segment.
        /BIC/ZC_SEGM           TYPE /BIC/OIZC_SEGM,
*      InfoObject: ZDECSPRCT DECS Profit Center.
        /BIC/ZDECSPRCT           TYPE /BIC/OIZDECSPRCT,
*      InfoObject: ZC_ORG DCS Profit Center.
        /BIC/ZC_ORG           TYPE /BIC/OIZC_ORG,
*      InfoObject: 0RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_TG_1.
    TYPES:
      _ty_t_TG_1        TYPE STANDARD TABLE OF _ty_s_TG_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
    ... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*
    METHODS
      new_record__end_routine
        IMPORTING
          source_segid             type rstran_segid
          source_record            type sytabix
        EXPORTING
          record_new               type sytabix.

    METHODS
      end_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          RESULT_PACKAGE              type _ty_t_TG_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_end_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method end_routine
*----------------------------------------------------------------------*
*       Calculation of result package via end routine.
*       Note: Update of target fields depends on rule assignment in
*       transformation editor. Only fields that have a rule assigned,
*       are updated to the data target.
*----------------------------------------------------------------------*
*   <-> result package
*----------------------------------------------------------------------*
  METHOD end_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <RESULT_FIELDS>    TYPE _ty_s_TG_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
    ... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
    ... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.

    TYPES:
      BEGIN OF t_dcs_comp,
        zcomp_cod TYPE /bic/oizcomp_cod,
        soursystem TYPE RSSOURSYSID,
        zgcompany TYPE /bic/oizgcompany,
        zc_segm TYPE /bic/oizc_segm,
      END OF t_dcs_comp.

    DATA: LV_ZDECSPRCT TYPE /BIC/OIZDECSPRCT,
          LV_PC_CHECK1 TYPE RSCHAVL,
          LD_ORG TYPE /BIC/OIZC_ORG,
          LV_COMP TYPE C LENGTH 4,
          L_T_ZDECSPRCT TYPE STANDARD TABLE OF /BIC/PZDECSPRCT,
          L_S_ZDECSPRCT TYPE /BIC/PZDECSPRCT,
          L_T_ZCOMP_COD TYPE STANDARD TABLE OF /BIC/PZCOMP_COD,
          L_S_ZCOMP_COD TYPE /BIC/PZCOMP_COD,
          L_T_ZC_COMP TYPE STANDARD TABLE OF /BIC/PZC_COMP,
          L_S_ZC_COMP TYPE /BIC/PZC_COMP,
          L_T_ZZSEGMENT TYPE STANDARD TABLE OF /BIC/PZZSEGMENT,
          L_S_ZZSEGMENT TYPE /BIC/PZZSEGMENT,
          L_T_ZC_MAPPC TYPE STANDARD TABLE OF /BIC/PZC_MAPPC,
          L_S_ZC_MAPPC TYPE /BIC/PZC_MAPPC,
          L_T_ZPROFIT_C TYPE STANDARD TABLE OF /BIC/PZPROFIT_C,
          L_S_ZPROFIT_C TYPE /BIC/PZPROFIT_C,
          l_t_zc_segm TYPE STANDARD TABLE OF /bic/pzc_segm,
          l_s_zc_segm TYPE /bic/pzc_segm,
          lv_non_dcs_ORG TYPE i,
          l_zc_org TYPE rsd_chavl,
          l_chavl TYPE rsd_chavl.


    SELECT * FROM /BIC/PZDECSPRCT INTO TABLE L_T_ZDECSPRCT
      WHERE OBJVERS = 'A'.

    SELECT * FROM /BIC/PZCOMP_COD INTO TABLE L_T_ZCOMP_COD
      WHERE OBJVERS = 'A'.

    SELECT * FROM /BIC/PZC_COMP INTO TABLE L_T_ZC_COMP.

    SELECT * FROM /BIC/PZC_MAPPC INTO TABLE L_T_ZC_MAPPC
      WHERE OBJVERS = 'A'.

    SELECT * FROM /BIC/PZPROFIT_C INTO TABLE L_T_ZPROFIT_C
      WHERE OBJVERS = 'A'.

    SELECT * FROM /BIC/PZZSEGMENT INTO TABLE L_T_ZZSEGMENT
      WHERE OBJVERS = 'A'.

    SELECT * FROM /BIC/PZC_SEGM INTO TABLE L_T_ZC_SEGM
      WHERE OBJVERS = 'A'.

    LOOP AT RESULT_PACKAGE ASSIGNING <RESULT_FIELDS>.

      CLEAR: lv_non_dcs_org, l_s_zdecsprct, lv_zdecsprct, lv_comp,
             l_s_zc_segm, l_s_zcomp_cod, ld_org, l_s_zc_mappc,
             l_s_zzsegment.

*Read company code master data once
      READ TABLE  l_t_zcomp_cod INTO l_s_zcomp_cod
        WITH KEY /bic/zcomp_cod = <RESULT_FIELDS>-/bic/zcomp_cod
                 SOURSYSTEM = <RESULT_FIELDS>-SOURSYSTEM.

**-----------------------------------------------------------
** Source system = 04
** Source system = 09
** Source system = ??
**-----------------------------------------------------------

      IF <RESULT_FIELDS>-SOURSYSTEM <> '02'.

*start****derive segm
        IF  <RESULT_FIELDS>-/bic/zzsegment  IS NOT INITIAL.

*From ZZSEGMENT
          READ TABLE l_t_zzsegment INTO l_s_zzsegment
          WITH KEY /bic/zzsegment = <RESULT_FIELDS>-/bic/zzsegment.
          IF SY-SUBRC = 0.
            <RESULT_FIELDS>-/bic/zc_segm  = l_s_zzsegment-/bic/zc_segm.
          ENDIF.
        ELSE.
*From  Company
          READ TABLE  l_t_zc_comp INTO l_s_zc_comp
            WITH KEY /bic/zc_comp = l_s_zcomp_cod-/bic/zgcompany.

          IF SY-SUBRC = 0.
*reading Segment from DCS legal company ZC_COMP
            <RESULT_FIELDS>-/bic/zc_segm = l_s_zc_comp-/bic/zc_segm.
          ENDIF.
*end****derive segment
        ENDIF.

* Read segment to get business unit if profit center is initial
        READ TABLE l_t_zc_segm INTO l_s_zc_segm
            WITH KEY /bic/zc_segm = <RESULT_FIELDS>-/bic/zc_segm.

        IF <RESULT_FIELDS>-/bic/zprofit_c IS NOT INITIAL.
*****DECS Profit Ctr and Entity derivation
          READ TABLE l_t_zc_mappc INTO l_s_zc_mappc
          WITH KEY /bic/zc_mappc = <RESULT_FIELDS>-/bic/zprofit_c.

          IF SY-SUBRC = 0.
            IF l_s_zc_mappc-/bic/zc_bool IS INITIAL.
              <RESULT_FIELDS>-/bic/zdecsprct = l_s_zc_mappc-/bic/zc_org.
            ELSE.
              lv_non_dcs_ORG = 2.
            ENDIF.
          ENDIF.
*  If Business Unit = DCS based on ZC_SEGM.
        ELSEIF l_s_zc_segm-/bic/zc_bunit = '02'.
*If YES then. Find first profit center in Company which is a company
*representative based on the type property
            IF l_s_zcomp_cod-/bic/zgcompany IS NOT INITIAL.
              READ TABLE l_t_zdecsprct INTO l_s_zdecsprct
                 WITH KEY /bic/zgcompany =
                 l_s_zcomp_cod-/bic/zgcompany
                 /bic/zprcatgy = '29'.
              IF SY-SUBRC = 0.
                 <RESULT_FIELDS>-/bic/zdecsprct =
                   l_s_zdecsprct-/bic/zdecsprct.
              ENDIF.
            ENDIF.
         ELSE.
          lv_non_dcs_ORG = 2.
        ENDIF.
      ENDIF.
**END*Mapping DCS Profit Centres from DECS Profit Centres

**-----------------------------------------------------------
** END Source system = 04
** END Source system = 09
** END Source system = ??
**-----------------------------------------------------------


**-----------------------------------------------------------
** Source system = 02
**-----------------------------------------------------------

      IF <RESULT_FIELDS>-SOURSYSTEM = '02'.
*derive ZDECSPRCT for DECS.

* Start derive segment - 1. part
        IF <RESULT_FIELDS>-/bic/zsegment IS NOT INITIAL.
           <RESULT_FIELDS>-/bic/zc_segm =
           <RESULT_FIELDS>-/bic/zsegment.

        ELSE.
* Segment is empty - read from Company Code master data
          READ TABLE  l_t_zc_comp INTO l_s_zc_comp
            WITH KEY /bic/zc_comp = l_s_zcomp_cod-/bic/zgcompany.

          IF SY-SUBRC = 0.
*reading Segment from DCS legal company ZC_COMP
            <RESULT_FIELDS>-/bic/zc_segm = l_s_zc_comp-/bic/zc_segm.
          ENDIF.
        ENDIF.
*end****derive segment

        IF <RESULT_FIELDS>-/bic/zc_segm IS NOT INITIAL.
* We have segment then get master data
          READ TABLE l_t_zc_segm INTO l_s_zc_segm
              WITH KEY /bic/zc_segm = <RESULT_FIELDS>-/bic/zc_segm.
        ENDIF.

* Profit center is not empty
        IF <RESULT_FIELDS>-/bic/zprofit_c IS NOT INITIAL.
          lv_zdecsprct = <RESULT_FIELDS>-/bic/zprofit_c.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT = lv_zdecsprct
           IMPORTING
             OUTPUT = <RESULT_FIELDS>-/bic/zdecsprct.

          READ TABLE l_t_zdecsprct INTO l_s_zdecsprct
             WITH KEY /bic/zdecsprct = <RESULT_FIELDS>-/bic/zdecsprct.

* Profit Center for '02' should always be available in ZDECSPRCT
* If not then it is a new profit center, or IP mismatch
          IF SY-SUBRC = 0.
*Start derive segment 2. part
*Derive segment from Profit Center if empty from source
*This will overwrite segment from Company Code found earlier
            IF <RESULT_FIELDS>-/bic/zsegment  IS INITIAL.
               <RESULT_FIELDS>-/bic/zc_segm =
               l_s_zdecsprct-/bic/zc_segm.
            ENDIF.
*    end****derive segment

*****XLIND: REMOVED - DECS PrCtr and therefore in MD with ZC_ORG
*****Generated during MD load ZDECSPRCTR->ZDECSPRCTR

*Is it a DCS profit center?
            IF l_s_zdecsprct-/bic/zprcatgy IS INITIAL OR
*If it is a DCS profit center is it also a DCS segment?
              l_s_zc_segm-/bic/zc_bunit <> '02'.
* DECS PrCtr but non DCS PrCtr or non DCS segment
* Create logical DCS PrCtr
               lv_non_dcs_ORG = 1.
            ENDIF.
          ENDIF.
*     Empty profit center
        ELSEIF l_s_zc_segm-/bic/zc_bunit = '02'.
*If Business Unit = DCS based on ZC_SEGM.
*If YES then. Find first profit center in Company which is a company
*representative based on the type property
          IF l_s_zcomp_cod-/bic/zgcompany IS NOT INITIAL.
            READ TABLE l_t_zdecsprct INTO l_s_zdecsprct
               WITH KEY /bic/zgcompany =
               l_s_zcomp_cod-/bic/zgcompany
               /bic/zprcatgy = '29'.
            IF SY-SUBRC = 0.
               <RESULT_FIELDS>-/bic/zdecsprct =
                 l_s_zdecsprct-/bic/zdecsprct.
            ENDIF.
          ENDIF.
        ELSE.
* Empty profit center with non DCS Segment
* Create logical DECS and DCS PrCtr
          lv_non_dcs_ORG = 2.
        ENDIF.
      ENDIF.

* Non DCS - create logic profit
      IF lv_non_dcs_org > 0.
*removing alpha
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              INPUT         = l_s_zcomp_cod-/bic/zgcompany
           IMPORTING
             OUTPUT        = lv_comp.
        IF lv_comp IS NOT INITIAL.
           IF <RESULT_FIELDS>-/bic/zc_segm IS INITIAL.
               CONCATENATE 'CC' lv_comp INTO ld_org.
           ELSE.
               CONCATENATE 'CC' lv_comp
               '_' <RESULT_FIELDS>-/bic/zc_segm INTO ld_org.
           ENDIF.
        IF lv_non_dcs_org = 1.
             <RESULT_FIELDS>-/bic/zc_org = ld_org.
        ELSE.
            <RESULT_FIELDS>-/bic/zc_org = ld_org.
            <RESULT_FIELDS>-/bic/zdecsprct = ld_org.
      ENDIF.

        ENDIF.
      ENDIF.

**-----------------------------------------------------------
** END Source system = 02
**-----------------------------------------------------------

**-----------------------------------------------------------

     IF <RESULT_FIELDS>-/bic/zdecsprct IS NOT INITIAL AND
       lv_non_dcs_org > 0.
*Integrity Check for ZDECSPRCT
        LV_PC_CHECK1 = <RESULT_FIELDS>-/BIC/ZDECSPRCT.
        CALL FUNCTION 'RSAR_VALUE_INTEGRITY_INFOOBJ'
          EXPORTING
           I_IOBJNM                 = 'ZDECSPRCT'
           I_CHAVL                  = LV_PC_CHECK1
*      I_HIGH_CARDINALITY       = RS_C_FALSE
        EXCEPTIONS
          VALUE_NOT_VALID          = 1
          OTHERS                   = 2.

        IF SY-SUBRC = 0.
* Lookup DCS Profit Center (ZC_ORG) from attribute value on ZDECSPRCT
          l_chavl = <RESULT_FIELDS>-/bic/zdecsprct.
          CALL FUNCTION 'RSAU_READ_MASTER_DATA'
            EXPORTING
              i_iobjnm                = 'ZDECSPRCT'
              i_chavl                 = l_chavl
              i_attrnm                = 'ZC_ORG'
            IMPORTING
              e_attrval               = l_zc_org
            EXCEPTIONS
              read_error              = 1
              no_such_attribute       = 2
              wrong_import_parameters = 3
              chavl_not_found         = 4
              OTHERS                  = 5.
          IF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            EXIT.
          ELSE.
            IF lv_non_dcs_org <> 2.
              <RESULT_FIELDS>-/bic/zc_org = l_zc_org.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.



*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "end_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_end_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_end_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
    ... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_end_routine

  METHOD new_record__end_routine.

***** IMPLEMENTATION  is only visible in generated program *****

  ENDMETHOD.
ENDCLASS.                    "routine IMPLEMENTATION
